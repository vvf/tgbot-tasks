import asyncio
import os
import re
from datetime import datetime, timedelta
from enum import IntEnum
from functools import partial
from typing import Union

import aiotg
from sqlalchemy.sql.functions import now

from tasksbot.models import Task
from tasksbot.models.chat import Chat

bot = aiotg.Bot(
    api_token=os.environ.get('TG_BOT_TOKEN', ''),
    default_in_groups=True,
)


class ChatState(IntEnum):
    NORMAL = 0
    EXPECT_TASK = 1
    EXPECT_PERIOD = 2
    EXPECT_TIME_WHEN_SEND_NOTIFY = 3
    EXPECT_TASK_TIME_WHEN_SEND_NOTIFY = 4


GREETING_BY_STATE = [
    '',
    '–í–≤–æ–¥–∏ –Ω–æ–≤–æ–µ –¥–µ–ª–æ',
    "–í–≤–æ–¥–∏ –ø–µ—Ä–∏–æ–¥",
    "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ß–ß:–ú–ú)"
    "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ß–ß:–ú–ú)"
]


@bot.command(r"^/start")
async def start(chat: aiotg.Chat, match):
    db_chat: Chat = await Chat.get(str(chat.id))
    if not db_chat:
        db_chat: Chat = await create_chat_in_db(chat)
        return chat.reply('–ü—Ä–∏–≤–µ—Ç. –ù–∞—á–Ω–∏ —Å —Ç–æ–≥–æ —á—Ç–æ —Å—Ä–∞–∑—É –≤–≤–µ–¥–∏ –¥–µ–ª–æ.')
    return chat.reply(f'–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ {GREETING_BY_STATE[db_chat.chat_state]}')


async def make_menu_markup(chat: aiotg.Chat):
    t: Union[Task, None] = None
    return {
        'inline_keyboard':
            [
                [
                    {
                        'text': "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ",
                        'callback_data': 'new'
                    },
                    {
                        'text': "‚öôÔ∏è –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                        'callback_data': 'setup/time'
                    }
                ]
            ] + [
                [
                    {
                        'text': f'‚û°Ô∏è{t.content}',
                        'callback_data': f'mark/{t.id}'
                    },
                    {
                        'text': "üîß‚è∞",
                        'callback_data': f'time/{t.id}'
                    },
                    {
                        'text': "üóë",
                        'callback_data': f'delete/{t.id}'
                    }
                ]
                for t in await Task.query.where(Task.chat_id == str(chat.id)).gino.all()

            ]
    }


@bot.command(r"^/menu")
async def menu(chat: aiotg.Chat, match):
    markup = await make_menu_markup(chat)
    chat.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", markup=markup)


def plural(number: int, one: str, two: str, many: str):
    if 5 < number < 20:
        return many
    number = number % 10
    if number == 1:
        return one
    if number < 5:
        return two
    return many


plural_days = partial(plural, one="–¥–µ–Ω—å", two="–¥–Ω—è", many="–¥–Ω–µ–π")


def get_chat_title(chat: aiotg.Chat):
    return chat.message['chat'].get('title') or chat.message['chat'].get('username')


@bot.default
async def message(chat: aiotg.Chat, match):
    db_chat: Chat = await Chat.get(str(chat.id))
    if not db_chat:
        db_chat: Chat = await create_chat_in_db(chat)
    if chat.message['chat']['type'] == 'group':
        pass
    if db_chat.chat_state == ChatState.EXPECT_TIME_WHEN_SEND_NOTIFY:
        try:
            hours, minutes = map(int, chat.message['text'].split(':'))
            from datetime import time
            time = time(hours, minutes, 0)
        except Exception:
            return chat.reply('–ß—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è. —á—Ç–æ —Ç–æ —Ç–∏–ø–∞ "12:22" —è –±—ã –ø–æ–Ω—è–ª.')
        await db_chat.update(
            chat_state=ChatState.NORMAL,
            notify_next_date_time=datetime.combine(
                db_chat.notify_next_date_time.date(), time
            ),
            editing_task_id=None
        ).apply()
        return chat.reply(f'–£—Å—Ç–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - {time:%H:%M}')
    elif db_chat.chat_state == ChatState.EXPECT_TASK:
        editing_task = await Task.create(
            content=chat.message['text'],
            message_id=str(chat.message['message_id']),
            chat_id=str(chat.id)
        )
        await db_chat.update(
            chat_state=ChatState.EXPECT_PERIOD,
            editing_task_id=editing_task.id
        ).apply()
        return chat.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö (–ø—Ä–æ—Å—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!)')
    elif db_chat.chat_state == ChatState.EXPECT_PERIOD and db_chat.editing_task_id:
        try:
            period = int(chat.message['text'])
        except Exception:
            return chat.reply('–ß—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. —á—Ç–æ —Ç–æ —Ç–∏–ø–∞ "5" —è –±—ã –ø–æ–Ω—è–ª, –Ω–æ –Ω–µ —ç—Ç–æ.')
        task: Task = await Task.get(db_chat.editing_task_id)
        await db_chat.update(chat_state=ChatState.NORMAL, editing_task_id=None).apply()
        if not task:
            chat.reply(f"–£–∂–µ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç. ({db_chat.editing_task_id})")
        await task.update(period_days=period).apply()

        return chat.send_text(
            f'–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ {period} {plural_days(period)}.',
            reply_to_message_id=task.message_id
        )

    return chat.reply('–Ω–µ –æ–∂–∏–¥–∞–ª —á—Ç–æ —Ç—ã —á—Ç–æ-—Ç–æ –º–Ω–µ '
                      '—Ç—É—Ç –Ω–∞–ø–∏—à–µ—à—å –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è '
                      '(–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞). –ò–ª–∏ —è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª.')


@bot.callback(r'new')
async def callback_new(chat: aiotg.Chat, cb, match):
    db_chat: Chat = await Chat.get(str(chat.id))
    await db_chat.update(chat_state=ChatState.EXPECT_TASK).apply()
    text = GREETING_BY_STATE[db_chat.chat_state]
    await asyncio.gather(chat.send_text(text), cb.answer(text=text, show_alert=False))


@bot.callback(r'setup/time')
async def callback_new(chat: aiotg.Chat, cb, match):
    db_chat: Chat = await Chat.get(str(chat.id))
    await db_chat.update(chat_state=ChatState.EXPECT_TIME_WHEN_SEND_NOTIFY).apply()
    text = f"–°–µ–π—á–∞—Å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {db_chat.notify_next_date_time.time():%H:%M}.\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß:–ú"
    await asyncio.gather(chat.send_text(text), cb.answer(text=text, show_alert=False))


@bot.callback(r'mark/(\d+)')
async def callback_mark_task_as_done(chat: aiotg.Chat, cb: aiotg.CallbackQuery, match: re.Match):
    task: Task = await Task.get(int(match.group(1)))
    if not task:
        text = f"–°—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —É –º–µ–Ω—è –Ω–µ—Ç (–ò–î={task.id})"
        return await cb.answer(text=text, show_alert=True)

    await task.update(
        done_mark_user_id=str(cb.src['from']['id']),
        last_done_time=now()
    ).apply()
    text = f'–ó–∞–¥–∞—á–∞ "{task.content}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. ' \
           f'–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {task.period_days} {plural_days(task.period_days)}'
    await cb.answer(text=text, show_alert=True)


@bot.callback(r'time/(\d+)')
async def callback_set_new_perio(chat: aiotg.Chat, cb: aiotg.CallbackQuery, match: re.Match):
    task: Task = await Task.get(int(match.group(1)))
    db_chat: Chat = await Chat.get(str(chat.id))
    if not task:
        text = f"–°—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —É –º–µ–Ω—è –Ω–µ—Ç (–ò–î={task.id})"
        return await cb.answer(text=text, show_alert=True)

    await db_chat.update(
        chat_state=ChatState.EXPECT_PERIOD,
        editing_task_id=task.id
    ).apply()
    text = f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö (–ø—Ä–æ—Å—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!) –¥–ª—è –∑–∞–¥–∞—á–∏ \"{task.content}\""
    await asyncio.gather(chat.send_text(text), cb.answer(text=text, show_alert=False))


@bot.callback(r'delete/(\d+)')
async def callback_delete_task(chat: aiotg.Chat, cb: aiotg.CallbackQuery, match: re.Match):
    task: Task = await Task.get(int(match.group(1)))
    if not task:
        text = f"–°—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —É –º–µ–Ω—è –Ω–µ—Ç (–ò–î={task.id})"
        return await cb.answer(text=text, show_alert=True)

    await task.delete()
    text = f'–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞'
    markup = await make_menu_markup(chat)
    await asyncio.gather(
        chat.edit_reply_markup(chat.message['message_id'], markup=markup),
        cb.answer(text=text, show_alert=True),
        chat.send_text(text, reply_to_message_id=task.message_id)
    )


async def create_chat_in_db(chat: aiotg.Chat, chat_state=ChatState.EXPECT_TASK) -> Chat:
    db_chat: Chat = await Chat.create(
        chat_id=str(chat.id),
        chat_name=get_chat_title(chat),
        chat_state=chat_state,
        notify_next_date_time=datetime.now() + timedelta(days=1)
    )
    return db_chat
