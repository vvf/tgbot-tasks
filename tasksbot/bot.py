import os
import re
from enum import IntEnum
from functools import partial
from typing import Union

import aiotg
from sqlalchemy.sql.functions import now

from tasksbot.models import Task
from tasksbot.models.chat import Chat

bot = aiotg.Bot(api_token=os.environ.get('TG_BOT_TOKEN', ''))


class ChatState(IntEnum):
    NORMAL = 0
    EXPECT_TASK = 1
    EXPECT_PERIOD = 2


GREETING_BY_STATE = [
    '',
    '–í–≤–æ–¥–∏ –Ω–æ–≤–æ–µ –¥–µ–ª–æ',
    "–í–≤–æ–¥–∏ –ø–µ—Ä–∏–æ–¥"
]


@bot.command(r"^/start")
async def start(chat: aiotg.Chat, match):
    db_chat = await Chat.query.where(Chat.chat_id == str(chat.id)).gino.first()
    if not db_chat:
        await Chat.create(chat_id=str(chat.id), chat_state=ChatState.EXPECT_TASK)
        return chat.reply('–ü—Ä–∏–≤–µ—Ç. –ù–∞—á–Ω–∏ —Å —Ç–æ–≥–æ —á—Ç–æ —Å—Ä–∞–∑—É –≤–≤–µ–¥–∏ –¥–µ–ª–æ.')
    return chat.reply(f'–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ {GREETING_BY_STATE[db_chat.chat_state]}')


async def make_menu_markup(chat: aiotg.Chat):
    t: Union[Task, None] = None
    return {
        'inline_keyboard':
            [
                [
                    {
                        'text': "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ",
                        'callback_data': 'new'
                    },
                    {
                        'text': "‚öôÔ∏è –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                        'callback_data': 'setup/time'
                    }
                ]
            ] + [
                [
                    {
                        'text': f'‚û°Ô∏è{t.content}',
                        'callback_data': f'mark/{t.id}'
                    },
                    {
                        'text': "üîß‚è∞",
                        'callback_data': f'time/{t.id}'
                    },
                    {
                        'text': "üóë",
                        'callback_data': f'delete/{t.id}'
                    }
                ]
                for t in await Task.query.where(Task.chat_id == str(chat.id)).gino.all()

            ]
    }


@bot.command(r"^/menu")
async def menu(chat: aiotg.Chat, match):
    markup = await make_menu_markup(chat)
    chat.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", markup=markup)


def plural(number: int, one: str, two: str, many: str):
    if 5 < number < 20:
        return many
    number = number % 10
    if number == 1:
        return one
    if number < 5:
        return two
    return many


plural_days = partial(plural, one="–¥–µ–Ω—å", two="–¥–Ω—è", many="–¥–Ω–µ–π")


@bot.default
async def message(chat: aiotg.Chat, match):
    db_chat: Chat = await Chat.query.where(Chat.chat_id == str(chat.id)).gino.first()
    if not db_chat:
        db_chat: Chat = await Chat.create(chat_id=str(chat.id), chat_state=ChatState.EXPECT_TASK)
    if db_chat.chat_state == ChatState.EXPECT_TASK:
        editing_task = await Task.create(
            content=chat.message['text'],
            message_id=str(chat.message['message_id']),
            chat_id=str(chat.id)
        )
        await db_chat.update(
            chat_state=ChatState.EXPECT_PERIOD,
            editing_task_id=editing_task.id
        ).apply()
        return chat.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö (–ø—Ä–æ—Å—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!)')
    elif db_chat.chat_state == ChatState.EXPECT_PERIOD and db_chat.editing_task_id:
        try:
            period = int(chat.message['text'])
        except Exception:
            return chat.reply('–ß—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. —á—Ç–æ —Ç–æ —Ç–∏–ø–∞ "5" —è –±—ã –ø–æ–Ω—è–ª, –Ω–æ –Ω–µ —ç—Ç–æ.')
        await db_chat.update(chat_state=ChatState.NORMAL).apply()
        task: Task = await Task.get(db_chat.editing_task_id)
        await task.update(period_days=period).apply()

        return chat.reply(f'–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ {period} {plural_days(period)}.')

    return chat.reply('–Ω–µ –æ–∂–∏–¥–∞–ª —á—Ç–æ —Ç—ã —á—Ç–æ-—Ç–æ –º–Ω–µ '
                      '—Ç—É—Ç –Ω–∞–ø–∏—à–µ—à—å –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è '
                      '(–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞). –ò–ª–∏ —è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª.')


@bot.callback(r'new')
async def callback_new(chat: aiotg.Chat, cb, match):
    db_chat: Chat = await Chat.query.where(Chat.chat_id == str(chat.id)).gino.first()
    await db_chat.update(chat_state=ChatState.EXPECT_TASK).apply()
    chat.send_text(GREETING_BY_STATE[db_chat.chat_state])


@bot.callback(r'mark/(\d+)')
async def callback_mark_as_done(chat: aiotg.Chat, cb, match: re.Match):
    task: Task = await Task.query.where(Task.id == int(match.group(1))).gino.first()
    if not task:
        return chat.send_text(f"–°—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —É –º–µ–Ω—è –Ω–µ—Ç (–ò–î={task.id})")

    await task.update(
        done_mark_user_id=str(cb.src['from']['id']),
        last_done_time=now()
    ).apply()
    chat.send_text(f'–ó–∞–¥–∞—á–∞ "{task.content}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. '
                   f'–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {task.period_days} {plural_days(task.period_days)}')
